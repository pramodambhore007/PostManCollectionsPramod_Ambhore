{
	"info": {
		"_postman_id": "bcaf29bc-a94d-461f-83d9-44c2d34bfd6e",
		"name": "GoRestAPIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "732190"
	},
	"item": [
		{
			"name": "GET APIs",
			"item": [
				{
					"name": "1-GET ALL USERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/public/v2/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "POST APIs",
			"item": [
				{
					"name": "3-Create A User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();//JS Object",
									"",
									"const userId = response.id;",
									"console.log(\"user id is == \" + userId);",
									"",
									"//L D E C G",
									"//set userid at local variable",
									"pm.variables.set(\"user_id\", userId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n    {\n        \"name\": \"{{$randomUserName}}\",\n        \"email\": \"nal_{{$randomEmail}}\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/public/v2/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "PUT APIs",
			"item": [
				{
					"name": "4-Update A User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \n    \"status\": \"inactive\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{user_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5-Patch A User",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Naveen Automation Labs API\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{user_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete APIs",
			"item": [
				{
					"name": "6 - Delete A User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{user_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUser",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if(pm.request.method == 'GET'){",
					"    pm.test(\"Status code is 200\", function () {",
					"        pm.response.to.have.status(200);",
					"    });",
					"}",
					"",
					"",
					"if(pm.request.method == 'POST'){",
					"",
					"    pm.test(\"Status code is 201\", function () {",
					"        pm.response.to.have.status(201);",
					"    });",
					"",
					"}",
					"",
					"if(pm.request.method == 'PUT' || pm.request.method == 'PATCH'){",
					"    pm.test(\"Status code is 200\", function () {",
					"        pm.response.to.have.status(200);",
					"    });",
					"",
					"}",
					"",
					"if(pm.request.method == 'DELETE'){",
					"",
					"    pm.test(\"Status code is 204\", function () {",
					"        pm.response.to.have.status(204);",
					"    });",
					"",
					"}",
					"",
					"",
					"if(pm.info.requestName !== '1-GET ALL USERS'){",
					"    pm.test(\"Response time is less than 5000ms\", function () {",
					"        pm.expect(pm.response.responseTime).to.be.below(5000);",
					"    });",
					"}",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "tokenID",
			"value": "{{vault:tokenID}}",
			"type": "string"
		}
	]
}